// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.7.2.
// **********************************************************************

package com.example.mqwebservice.service.mqserver;

import com.qq.tars.protocol.annotation.*;
import com.qq.tars.protocol.tars.annotation.*;
import com.qq.tars.common.support.Holder;
import java.util.concurrent.CompletableFuture;

@Servant
public interface MessagePrx {

	 boolean send(@TarsMethodParameter(name="msg")String msg);

	 boolean send(@TarsMethodParameter(name="msg")String msg, @TarsContext java.util.Map<String, String> ctx);

	 void async_send(@TarsCallback MessagePrxCallback callback, @TarsMethodParameter(name="msg")String msg);

	 void async_send(@TarsCallback MessagePrxCallback callback, @TarsMethodParameter(name="msg")String msg, @TarsContext java.util.Map<String, String> ctx);

	 CompletableFuture<java.lang.Boolean>  promise_send(@TarsMethodParameter(name="msg")String msg);

	 CompletableFuture<java.lang.Boolean>  promise_send(@TarsMethodParameter(name="msg")String msg, @TarsContext java.util.Map<String, String> ctx);

	 boolean encode(@TarsMethodParameter(name="sign")String sign, @TarsHolder(name="enStr") Holder<String> enStr);

	 boolean encode(@TarsMethodParameter(name="sign")String sign, @TarsHolder(name="enStr") Holder<String> enStr, @TarsContext java.util.Map<String, String> ctx);

	 void async_encode(@TarsCallback MessagePrxCallback callback, @TarsMethodParameter(name="sign")String sign);

	 void async_encode(@TarsCallback MessagePrxCallback callback, @TarsMethodParameter(name="sign")String sign, @TarsContext java.util.Map<String, String> ctx);

	 CompletableFuture<java.lang.Boolean>  promise_encode(@TarsMethodParameter(name="sign")String sign, @TarsHolder(name="enStr") Holder<String> enStr);

	 CompletableFuture<java.lang.Boolean>  promise_encode(@TarsMethodParameter(name="sign")String sign, @TarsHolder(name="enStr") Holder<String> enStr, @TarsContext java.util.Map<String, String> ctx);

	 boolean encodeWithSend(@TarsMethodParameter(name="msg")String msg, @TarsMethodParameter(name="sign")String sign);

	 boolean encodeWithSend(@TarsMethodParameter(name="msg")String msg, @TarsMethodParameter(name="sign")String sign, @TarsContext java.util.Map<String, String> ctx);

	 void async_encodeWithSend(@TarsCallback MessagePrxCallback callback, @TarsMethodParameter(name="msg")String msg, @TarsMethodParameter(name="sign")String sign);

	 void async_encodeWithSend(@TarsCallback MessagePrxCallback callback, @TarsMethodParameter(name="msg")String msg, @TarsMethodParameter(name="sign")String sign, @TarsContext java.util.Map<String, String> ctx);

	 CompletableFuture<java.lang.Boolean>  promise_encodeWithSend(@TarsMethodParameter(name="msg")String msg, @TarsMethodParameter(name="sign")String sign);

	 CompletableFuture<java.lang.Boolean>  promise_encodeWithSend(@TarsMethodParameter(name="msg")String msg, @TarsMethodParameter(name="sign")String sign, @TarsContext java.util.Map<String, String> ctx);
}
